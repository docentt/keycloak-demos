{
	"info": {
		"_postman_id": "9f0296f5-4f6c-4f87-9bde-79d316807cc3",
		"name": "Keycloak - demos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2556997"
	},
	"item": [
		{
			"name": "master realm",
			"item": [
				{
					"name": "discovery",
					"item": [
						{
							"name": "OIDC discovery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var realmPrefix = pm.environment.get(\"active-realm\") + \"-\";\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"issuer\", jsonData.issuer);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"authorization_endpoint\", jsonData.authorization_endpoint);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"token_endpoint\", jsonData.token_endpoint);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"introspection_endpoint\", jsonData.introspection_endpoint);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"userinfo_endpoint\", jsonData.userinfo_endpoint);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"revocation_endpoint\", jsonData.revocation_endpoint);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"end_session_endpoint\", jsonData.end_session_endpoint);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"jwks_uri\", jsonData.jwks_uri);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_path}}/realms/{{active-realm}}/.well-known/openid-configuration",
									"host": [
										"{{base_path}}"
									],
									"path": [
										"realms",
										"{{active-realm}}",
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "JWKS",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{active-jwks_uri}}",
									"host": [
										"{{active-jwks_uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "auth",
					"item": [
						{
							"name": "ROPC Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var realmPrefix = pm.environment.get(\"active-realm\") + \"-\";\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token\", jsonData.access_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"refresh_token\", jsonData.refresh_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"tokens_scope\", jsonData.scope);\r",
											"const payload = jsonData.access_token.split('.')[1];\r",
											"const parsed = JSON.parse(atob(payload));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-json\", JSON.stringify(parsed));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-sub\", parsed.sub);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-exp\", new Date(Number(parsed.exp)*1000).toLocaleString(\"pl-PL\"));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-iat\", new Date(Number(parsed.iat)*1000).toLocaleString(\"pl-PL\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{active-username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{active-password}}",
											"type": "text"
										},
										{
											"key": "totp",
											"value": "{{active-totp}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{active-ROPC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-ROPC_secret}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "scope",
											"value": "openid email profile",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{active-token_endpoint}}",
									"host": [
										"{{active-token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var realmPrefix = pm.environment.get(\"active-realm\") + \"-\";\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token\", jsonData.access_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"refresh_token\", jsonData.refresh_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"id_token\", jsonData.id_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"tokens_scope\", jsonData.scope);\r",
											"const payload = jsonData.access_token.split('.')[1];\r",
											"const parsed = JSON.parse(atob(payload));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-json\", JSON.stringify(parsed));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-sub\", parsed.sub);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-exp\", new Date(Number(parsed.exp)*1000).toLocaleString(\"pl-PL\"));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-iat\", new Date(Number(parsed.iat)*1000).toLocaleString(\"pl-PL\"));\r",
											"if(jsonData.id_token){\r",
											"    const idpayload = jsonData.id_token.split('.')[1];\r",
											"    const idparsed = JSON.parse(atob(idpayload));\r",
											"    postman.setEnvironmentVariable(realmPrefix+\"id_token_payload-json\", JSON.stringify(idparsed));\r",
											"    postman.setEnvironmentVariable(realmPrefix+\"id_token_payload-sub\", idparsed.sub);\r",
											"    postman.setEnvironmentVariable(realmPrefix+\"id_token_payload-exp\", new Date(Number(idparsed.exp)*1000).toLocaleString(\"pl-PL\"));\r",
											"    postman.setEnvironmentVariable(realmPrefix+\"id_token_payload-iat\", new Date(Number(idparsed.iat)*1000).toLocaleString(\"pl-PL\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-ROPC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-ROPC_secret}}",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{active-refresh_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{active-token_endpoint}}",
									"host": [
										"{{active-token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "userinfo",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{active-access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{active-userinfo_endpoint}}",
									"host": [
										"{{active-userinfo_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "userinfo with token via Browser",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "grant_type",
											"value": "authorization_code_with_pkce",
											"type": "string"
										},
										{
											"key": "refreshTokenUrl",
											"value": "{{active-token_endpoint}}",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "{{active-token_endpoint}}",
											"type": "string"
										},
										{
											"key": "authUrl",
											"value": "{{active-authorization_endpoint}}",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "body",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "security-admin-console",
											"type": "string"
										},
										{
											"key": "useBrowser",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "tokenName",
											"value": "master_security-admin-console",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{active-userinfo_endpoint}}",
									"host": [
										"{{active-userinfo_endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "token",
					"item": [
						{
							"name": "Revoke - access",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{active-access_token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-ROPC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-ROPC_secret}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{active-AC_client}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{active-AC_secret}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{active-CC_client}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{active-CC_secret}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{active-revocation_endpoint}}",
									"host": [
										"{{active-revocation_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke - refresh",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{active-refresh_token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-ROPC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-ROPC_secret}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{active-AC_client}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{active-AC_secret}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{active-CC_client}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{active-CC_secret}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{active-revocation_endpoint}}",
									"host": [
										"{{active-revocation_endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin console",
					"item": [
						{
							"name": "whoami",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{active-access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_path}}/admin/{{active-realm}}/console/whoami",
									"host": [
										"{{base_path}}"
									],
									"path": [
										"admin",
										"{{active-realm}}",
										"console",
										"whoami"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin API",
					"item": [
						{
							"name": "users",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{active-access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_path}}/admin/realms/{{active-realm}}/users?briefRepresentation=true",
									"host": [
										"{{base_path}}"
									],
									"path": [
										"admin",
										"realms",
										"{{active-realm}}",
										"users"
									],
									"query": [
										{
											"key": "briefRepresentation",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"var realm = pm.environment.get(\"master-realm\");\r",
							"pm.environment.set(\"active-realm\", realm);\r",
							"\r",
							"pm.environment.set(\"active-jwks_uri\", pm.environment.get(realm + \"-jwks_uri\"));\r",
							"pm.environment.set(\"active-authorization_endpoint\", pm.environment.get(realm + \"-authorization_endpoint\"));\r",
							"pm.environment.set(\"active-token_endpoint\", pm.environment.get(realm + \"-token_endpoint\"));\r",
							"pm.environment.set(\"active-introspection_endpoint\", pm.environment.get(realm + \"-introspection_endpoint\"));\r",
							"pm.environment.set(\"active-userinfo_endpoint\", pm.environment.get(realm + \"-userinfo_endpoint\"));\r",
							"pm.environment.set(\"active-revocation_endpoint\", pm.environment.get(realm + \"-revocation_endpoint\"));\r",
							"pm.environment.set(\"active-end_session_endpoint\", pm.environment.get(realm + \"-end_session_endpoint\"));\r",
							"\r",
							"pm.environment.set(\"active-username\", pm.environment.get(realm + \"-username\"));\r",
							"pm.environment.set(\"active-password\", pm.environment.get(realm + \"-password\"));\r",
							"pm.environment.set(\"active-totp\", pm.environment.get(realm + \"-totp\"));\r",
							"pm.environment.set(\"active-access_token\", pm.environment.get(realm + \"-access_token\"));\r",
							"pm.environment.set(\"active-refresh_token\", pm.environment.get(realm + \"-refresh_token\"));\r",
							"pm.environment.set(\"active-id_token\", pm.environment.get(realm + \"-id_token\"));\r",
							"pm.environment.set(\"active-AC_client\", pm.environment.get(realm + \"-AC_client\"));\r",
							"pm.environment.set(\"active-AC_secret\", pm.environment.get(realm + \"-AC_secret\"));\r",
							"pm.environment.set(\"active-AC_redirect_uri\", pm.environment.get(realm + \"-AC_redirect_uri\"));\r",
							"pm.environment.set(\"active-ROPC_client\", pm.environment.get(realm + \"-ROPC_client\"));\r",
							"pm.environment.set(\"active-ROPC_secret\", pm.environment.get(realm + \"-ROPC_secret\"));\r",
							"pm.environment.set(\"active-CC_client\", pm.environment.get(realm + \"-CC_client\"));\r",
							"pm.environment.set(\"active-CC_secret\", pm.environment.get(realm + \"-CC_secret\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "operational realm",
			"item": [
				{
					"name": "discovery",
					"item": [
						{
							"name": "OIDC discovery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var realmPrefix = pm.environment.get(\"active-realm\") + \"-\";\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"issuer\", jsonData.issuer);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"authorization_endpoint\", jsonData.authorization_endpoint);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"token_endpoint\", jsonData.token_endpoint);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"introspection_endpoint\", jsonData.introspection_endpoint);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"userinfo_endpoint\", jsonData.userinfo_endpoint);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"revocation_endpoint\", jsonData.revocation_endpoint);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"end_session_endpoint\", jsonData.end_session_endpoint);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"jwks_uri\", jsonData.jwks_uri);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_path}}/realms/{{active-realm}}/.well-known/openid-configuration",
									"host": [
										"{{base_path}}"
									],
									"path": [
										"realms",
										"{{active-realm}}",
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "JWKS",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{active-jwks_uri}}",
									"host": [
										"{{active-jwks_uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "auth",
					"item": [
						{
							"name": "ROPC Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var realmPrefix = pm.environment.get(\"active-realm\") + \"-\";\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token\", jsonData.access_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"refresh_token\", jsonData.refresh_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"tokens_scope\", jsonData.scope);\r",
											"const payload = jsonData.access_token.split('.')[1];\r",
											"const parsed = JSON.parse(atob(payload));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-json\", JSON.stringify(parsed));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-sub\", parsed.sub);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-exp\", new Date(Number(parsed.exp)*1000).toLocaleString(\"pl-PL\"));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-iat\", new Date(Number(parsed.iat)*1000).toLocaleString(\"pl-PL\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{active-username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{active-password}}",
											"type": "text"
										},
										{
											"key": "totp",
											"value": "{{active-totp}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{active-ROPC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-ROPC_secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid email profile",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{active-token_endpoint}}",
									"host": [
										"{{active-token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var realmPrefix = pm.environment.get(\"active-realm\") + \"-\";\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token\", jsonData.access_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"refresh_token\", jsonData.refresh_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"id_token\", jsonData.id_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"tokens_scope\", jsonData.scope);\r",
											"const payload = jsonData.access_token.split('.')[1];\r",
											"const parsed = JSON.parse(atob(payload));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-json\", JSON.stringify(parsed));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-sub\", parsed.sub);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-exp\", new Date(Number(parsed.exp)*1000).toLocaleString(\"pl-PL\"));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-iat\", new Date(Number(parsed.iat)*1000).toLocaleString(\"pl-PL\"));\r",
											"if(jsonData.id_token){\r",
											"    const idpayload = jsonData.id_token.split('.')[1];\r",
											"    const idparsed = JSON.parse(atob(idpayload));\r",
											"    postman.setEnvironmentVariable(realmPrefix+\"id_token_payload-json\", JSON.stringify(idparsed));\r",
											"    postman.setEnvironmentVariable(realmPrefix+\"id_token_payload-sub\", idparsed.sub);\r",
											"    postman.setEnvironmentVariable(realmPrefix+\"id_token_payload-exp\", new Date(Number(idparsed.exp)*1000).toLocaleString(\"pl-PL\"));\r",
											"    postman.setEnvironmentVariable(realmPrefix+\"id_token_payload-iat\", new Date(Number(idparsed.iat)*1000).toLocaleString(\"pl-PL\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-ROPC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-ROPC_secret}}",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{active-refresh_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{active-token_endpoint}}",
									"host": [
										"{{active-token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CC Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var realmPrefix = pm.environment.get(\"active-realm\") + \"-\";\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token\", jsonData.access_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"tokens_scope\", jsonData.scope);\r",
											"const payload = jsonData.access_token.split('.')[1];\r",
											"const parsed = JSON.parse(atob(payload));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-json\", JSON.stringify(parsed));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-sub\", parsed.sub);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-exp\", new Date(Number(parsed.exp)*1000).toLocaleString(\"pl-PL\"));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-iat\", new Date(Number(parsed.iat)*1000).toLocaleString(\"pl-PL\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-CC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-CC_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{active-token_endpoint}}",
									"host": [
										"{{active-token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CC Grant with client_secret_jwt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var realmPrefix = pm.environment.get(\"active-realm\") + \"-\";\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token\", jsonData.access_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"tokens_scope\", jsonData.scope);\r",
											"const payload = jsonData.access_token.split('.')[1];\r",
											"const parsed = JSON.parse(atob(payload));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-json\", JSON.stringify(parsed));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-sub\", parsed.sub);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-exp\", new Date(Number(parsed.exp)*1000).toLocaleString(\"pl-PL\"));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-iat\", new Date(Number(parsed.iat)*1000).toLocaleString(\"pl-PL\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-CC_client_client_secret_jwt}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{active-token_endpoint}}",
									"host": [
										"{{active-token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CC Grant with private_key_jwt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var realmPrefix = pm.environment.get(\"active-realm\") + \"-\";\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token\", jsonData.access_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"tokens_scope\", jsonData.scope);\r",
											"const payload = jsonData.access_token.split('.')[1];\r",
											"const parsed = JSON.parse(atob(payload));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-json\", JSON.stringify(parsed));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-sub\", parsed.sub);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-exp\", new Date(Number(parsed.exp)*1000).toLocaleString(\"pl-PL\"));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-iat\", new Date(Number(parsed.iat)*1000).toLocaleString(\"pl-PL\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-CC_client_private_key_jwt}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{active-token_endpoint}}",
									"host": [
										"{{active-token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AC -> tokens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var realmPrefix = pm.environment.get(\"active-realm\") + \"-\";\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token\", jsonData.access_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"refresh_token\", jsonData.refresh_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"id_token\", jsonData.id_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"tokens_scope\", jsonData.scope);\r",
											"const payload = jsonData.access_token.split('.')[1];\r",
											"const parsed = JSON.parse(atob(payload));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-json\", JSON.stringify(parsed));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-sub\", parsed.sub);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-exp\", new Date(Number(parsed.exp)*1000).toLocaleString(\"pl-PL\"));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-iat\", new Date(Number(parsed.iat)*1000).toLocaleString(\"pl-PL\"));\r",
											"const idpayload = jsonData.id_token.split('.')[1];\r",
											"const idparsed = JSON.parse(atob(idpayload));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"id_token_payload-json\", JSON.stringify(parsed));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"id_token_payload-sub\", parsed.sub);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"id_token_payload-exp\", new Date(Number(parsed.exp)*1000).toLocaleString(\"pl-PL\"));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"id_token_payload-iat\", new Date(Number(parsed.iat)*1000).toLocaleString(\"pl-PL\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-AC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-AC_secret}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{active-AC_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "code",
											"value": "",
											"description": "Tutaj wkleić Authorization Code",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "",
											"description": "Tutaj wkleić PKCE Code Verifier (tylko, gdy na kliencie jest PKCE)",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{active-token_endpoint}}",
									"host": [
										"{{active-token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "userinfo",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{active-access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{active-userinfo_endpoint}}",
									"host": [
										"{{active-userinfo_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{active-end_session_endpoint}}?post_logout_redirect_uri={{active-AC_redirect_uri}}&id_token_hint={{active-id_token}}",
									"host": [
										"{{active-end_session_endpoint}}"
									],
									"query": [
										{
											"key": "post_logout_redirect_uri",
											"value": "{{active-AC_redirect_uri}}"
										},
										{
											"key": "id_token_hint",
											"value": "{{active-id_token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "token",
					"item": [
						{
							"name": "Revoke - access",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{active-access_token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-ROPC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-ROPC_secret}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{active-AC_client}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{active-AC_secret}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{active-CC_client}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{active-CC_secret}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{active-revocation_endpoint}}",
									"host": [
										"{{active-revocation_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke - refresh",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{active-refresh_token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-ROPC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-ROPC_secret}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{active-AC_client}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{active-AC_secret}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{active-CC_client}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{active-CC_secret}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{active-revocation_endpoint}}",
									"host": [
										"{{active-revocation_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect - access",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{active-access_token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-ROPC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-ROPC_secret}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-AC_client}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{active-AC_secret}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{active-CC_client}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{active-CC_secret}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{active-introspection_endpoint}}",
									"host": [
										"{{active-introspection_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect - refresh",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{active-ROPC_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{active-ROPC_client}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{active-refresh_token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-ROPC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-ROPC_secret}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-AC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-AC_secret}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{active-CC_client}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{active-CC_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{active-introspection_endpoint}}",
									"host": [
										"{{active-introspection_endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin console",
					"item": [
						{
							"name": "whoami",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{active-access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_path}}/admin/{{active-realm}}/console/whoami",
									"host": [
										"{{base_path}}"
									],
									"path": [
										"admin",
										"{{active-realm}}",
										"console",
										"whoami"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin API",
					"item": [
						{
							"name": "users",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{active-access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_path}}/admin/realms/{{active-realm}}/users?briefRepresentation=true",
									"host": [
										"{{base_path}}"
									],
									"path": [
										"admin",
										"realms",
										"{{active-realm}}",
										"users"
									],
									"query": [
										{
											"key": "briefRepresentation",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"var realm = pm.environment.get(\"operational-realm\");\r",
							"pm.environment.set(\"active-realm\", realm);\r",
							"\r",
							"pm.environment.set(\"active-jwks_uri\", pm.environment.get(realm + \"-jwks_uri\"));\r",
							"pm.environment.set(\"active-authorization_endpoint\", pm.environment.get(realm + \"-authorization_endpoint\"));\r",
							"pm.environment.set(\"active-token_endpoint\", pm.environment.get(realm + \"-token_endpoint\"));\r",
							"pm.environment.set(\"active-introspection_endpoint\", pm.environment.get(realm + \"-introspection_endpoint\"));\r",
							"pm.environment.set(\"active-userinfo_endpoint\", pm.environment.get(realm + \"-userinfo_endpoint\"));\r",
							"pm.environment.set(\"active-revocation_endpoint\", pm.environment.get(realm + \"-revocation_endpoint\"));\r",
							"pm.environment.set(\"active-end_session_endpoint\", pm.environment.get(realm + \"-end_session_endpoint\"));\r",
							"\r",
							"pm.environment.set(\"active-username\", pm.environment.get(realm + \"-username\"));\r",
							"pm.environment.set(\"active-password\", pm.environment.get(realm + \"-password\"));\r",
							"pm.environment.set(\"active-totp\", pm.environment.get(realm + \"-totp\"));\r",
							"pm.environment.set(\"active-access_token\", pm.environment.get(realm + \"-access_token\"));\r",
							"pm.environment.set(\"active-refresh_token\", pm.environment.get(realm + \"-refresh_token\"));\r",
							"pm.environment.set(\"active-id_token\", pm.environment.get(realm + \"-id_token\"));\r",
							"pm.environment.set(\"active-AC_client\", pm.environment.get(realm + \"-AC_client\"));\r",
							"pm.environment.set(\"active-AC_secret\", pm.environment.get(realm + \"-AC_secret\"));\r",
							"pm.environment.set(\"active-AC_redirect_uri\", pm.environment.get(realm + \"-AC_redirect_uri\"));\r",
							"pm.environment.set(\"active-ROPC_client\", pm.environment.get(realm + \"-ROPC_client\"));\r",
							"pm.environment.set(\"active-ROPC_secret\", pm.environment.get(realm + \"-ROPC_secret\"));\r",
							"pm.environment.set(\"active-CC_client\", pm.environment.get(realm + \"-CC_client\"));\r",
							"pm.environment.set(\"active-CC_secret\", pm.environment.get(realm + \"-CC_secret\"));\r",
							"pm.environment.set(\"active-CC_client_client_secret_jwt\", pm.environment.get(realm + \"-CC_client_client_secret_jwt\"));\r",
							"pm.environment.set(\"active-CC_client_private_key_jwt\", pm.environment.get(realm + \"-CC_client_private_key_jwt\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "demo.com - OIDC/OAuth2.0 tester app",
			"item": [
				{
					"name": "GET api/public",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{active-api_base_url}}/public?want_online_introspection",
							"host": [
								"{{active-api_base_url}}"
							],
							"path": [
								"public"
							],
							"query": [
								{
									"key": "want_online_introspection",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET api/profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{active-api_base_url}}/profile?want_online_introspection",
							"host": [
								"{{active-api_base_url}}"
							],
							"path": [
								"profile"
							],
							"query": [
								{
									"key": "want_online_introspection",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT api/profile",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{active-api_base_url}}/profile?want_online_introspection",
							"host": [
								"{{active-api_base_url}}"
							],
							"path": [
								"profile"
							],
							"query": [
								{
									"key": "want_online_introspection",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET api/data/123",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{active-api_base_url}}/data/123?want_online_introspection",
							"host": [
								"{{active-api_base_url}}"
							],
							"path": [
								"data",
								"123"
							],
							"query": [
								{
									"key": "want_online_introspection",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT api/data/123",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{active-api_base_url}}/data/123?want_online_introspection",
							"host": [
								"{{active-api_base_url}}"
							],
							"path": [
								"data",
								"123"
							],
							"query": [
								{
									"key": "want_online_introspection",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET api/data/export",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{active-api_base_url}}/data/export?want_online_introspection",
							"host": [
								"{{active-api_base_url}}"
							],
							"path": [
								"data",
								"export"
							],
							"query": [
								{
									"key": "want_online_introspection",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET admin.api/config",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{active-admin_api_base_url}}/config?want_online_introspection",
							"host": [
								"{{active-admin_api_base_url}}"
							],
							"path": [
								"config"
							],
							"query": [
								{
									"key": "want_online_introspection",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT admin.api/config",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{active-admin_api_base_url}}/config?want_online_introspection",
							"host": [
								"{{active-admin_api_base_url}}"
							],
							"path": [
								"config"
							],
							"query": [
								{
									"key": "want_online_introspection",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "refreshRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "tokenRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "authRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "tokenName",
						"value": "demo.com-OIDC/OAuth2.0-tester_app",
						"type": "string"
					},
					{
						"key": "challengeAlgorithm",
						"value": "S256",
						"type": "string"
					},
					{
						"key": "useBrowser",
						"value": true,
						"type": "boolean"
					},
					{
						"key": "scope",
						"value": "{{active-scope}}",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "authorization_code",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{active-client_id}}",
						"type": "string"
					},
					{
						"key": "authUrl",
						"value": "{{active-authorization_endpoint}}",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "body",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "{{active-token_endpoint}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"var realm = \"demo.com\";\r",
							"pm.environment.set(\"active-realm\", realm);\r",
							"\r",
							"pm.environment.set(\"active-authorization_endpoint\", pm.environment.get(realm + \"-authorization_endpoint\"));\r",
							"pm.environment.set(\"active-token_endpoint\", pm.environment.get(realm + \"-token_endpoint\"));\r",
							"\r",
							"pm.environment.set(\"active-client_id\", pm.environment.get(realm + \"-tester_app_client_id\"));\r",
							"pm.environment.set(\"active-scope\", pm.environment.get(realm + \"-tester_app_scope\"));\r",
							"\r",
							"pm.environment.set(\"active-api_base_url\", pm.environment.get(realm + \"-api_base_url\"));\r",
							"pm.environment.set(\"active-admin_api_base_url\", pm.environment.get(realm + \"-admin_api_base_url\"));\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "lab.com - OIDC/OAuth2.0 tester app Copy",
			"item": [
				{
					"name": "Token exchange",
					"item": [
						{
							"name": "Token exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var realmPrefix = \"lab.com-\";\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token\", jsonData.access_token);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"tokens_scope\", jsonData.scope);\r",
											"const payload = jsonData.access_token.split('.')[1];\r",
											"const parsed = JSON.parse(atob(payload));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-json\", JSON.stringify(parsed));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-sub\", parsed.sub);\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-exp\", new Date(Number(parsed.exp)*1000).toLocaleString(\"pl-PL\"));\r",
											"postman.setEnvironmentVariable(realmPrefix+\"access_token_payload-iat\", new Date(Number(parsed.iat)*1000).toLocaleString(\"pl-PL\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:token-exchange",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "https://api.admin.example.org",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "",
											"type": "text"
										},
										{
											"key": "audience",
											"value": "https://api.internal.example.org",
											"type": "text"
										},
										{
											"key": "requested_token_type",
											"value": "urn:ietf:params:oauth:token-type:access_token",
											"type": "text"
										},
										{
											"key": "subject_token",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{active-token_endpoint}}",
									"host": [
										"{{active-token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST internal.api/claims/123/process Copy",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{lab.com-access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{active-internal_api_base_url}}/claims/123/process",
									"host": [
										"{{active-internal_api_base_url}}"
									],
									"path": [
										"claims",
										"123",
										"process"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST api/policies",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{active-api_base_url}}/policies",
							"host": [
								"{{active-api_base_url}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET api/policies/123",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{active-api_base_url}}/policies/123",
							"host": [
								"{{active-api_base_url}}"
							],
							"path": [
								"policies",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT api/policies/123",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{active-api_base_url}}/policies/123",
							"host": [
								"{{active-api_base_url}}"
							],
							"path": [
								"policies",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET api/claims",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{active-api_base_url}}/claims",
							"host": [
								"{{active-api_base_url}}"
							],
							"path": [
								"claims"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET admin.api/claims",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{active-admin_api_base_url}}/claims",
							"host": [
								"{{active-admin_api_base_url}}"
							],
							"path": [
								"claims"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST admin.api/claims/123/approve",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{active-admin_api_base_url}}/claims/123/approve",
							"host": [
								"{{active-admin_api_base_url}}"
							],
							"path": [
								"claims",
								"123",
								"approve"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST admin.api/claims/123/reject",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{active-admin_api_base_url}}/claims/123/reject",
							"host": [
								"{{active-admin_api_base_url}}"
							],
							"path": [
								"claims",
								"123",
								"reject"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST internal.api/claims/123/process",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{active-internal_api_base_url}}/claims/123/process",
							"host": [
								"{{active-internal_api_base_url}}"
							],
							"path": [
								"claims",
								"123",
								"process"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "tokenName",
						"value": "lab.com-OIDC/OAuth2.0-tester_app",
						"type": "string"
					},
					{
						"key": "refreshRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "tokenRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "authRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "challengeAlgorithm",
						"value": "S256",
						"type": "string"
					},
					{
						"key": "useBrowser",
						"value": true,
						"type": "boolean"
					},
					{
						"key": "scope",
						"value": "{{active-scope}}",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "authorization_code",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{active-client_id}}",
						"type": "string"
					},
					{
						"key": "authUrl",
						"value": "{{active-authorization_endpoint}}",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "body",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "{{active-token_endpoint}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"var realm = \"lab.com\";\r",
							"pm.environment.set(\"active-realm\", realm);\r",
							"\r",
							"pm.environment.set(\"active-authorization_endpoint\", pm.environment.get(realm + \"-authorization_endpoint\"));\r",
							"pm.environment.set(\"active-token_endpoint\", pm.environment.get(realm + \"-token_endpoint\"));\r",
							"\r",
							"pm.environment.set(\"active-client_id\", pm.environment.get(realm + \"-tester_app_client_id\"));\r",
							"pm.environment.set(\"active-scope\", pm.environment.get(realm + \"-tester_app_scope\"));\r",
							"\r",
							"pm.environment.set(\"active-api_base_url\", pm.environment.get(realm + \"-api_base_url\"));\r",
							"pm.environment.set(\"active-admin_api_base_url\", pm.environment.get(realm + \"-admin_api_base_url\"));\r",
							"pm.environment.set(\"active-internal_api_base_url\", pm.environment.get(realm + \"-internal_api_base_url\"));\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}